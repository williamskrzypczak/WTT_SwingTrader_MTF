//@version=5
indicator("WTT Swing Trader MTF", shorttitle="WTT SwingTrader MTF", overlay=true)

// ============================================================================
// WTT SWING TRADER MTF - WaveRider Trading Technologies
// ============================================================================
// R1.5 - Updated performance stats to base on SL, PT, and TS
// R1.4 - Final release with comprehensive features
// R1.3 - Added trend change alerts and visual indicators
// R1.2 - Enhanced alerts with price points and currency info
// R1.1 - Improved visual elements and color scheme
// R1.0 - Initial release
// - Multi-timeframe swing trading indicator (Daily trend + Current timeframe signals)
// - Trend detection using EMA alignment (12, 26, 50 periods)
// - MACD and RSI momentum confirmation
// - Dynamic Support/Resistance levels with pivot points
// - Entry/Exit signals with comprehensive alerts
// - Volume confirmation for signal validation
// - Trend cloud visualization with customizable transparency
// - Dark-themed status table with timeframe information
// - Trend change alerts synchronized with visual indicators
// - Color-coded signals: Orange (bullish), Purple (bearish)
// - Performance tracking based on SL, PT, and TS exits
// ============================================================================

// Hardcoded Parameters
// ============================================================================
// Timeframe selection
tf = "D"

// EMA Settings
ema_fast = 12
ema_slow = 26
ema_trend = 50

// MACD Settings
macd_fast = 12
macd_slow = 26
macd_signal = 9

// RSI Settings
rsi_length = 14



// Volume Settings
volume_ma_length = 20

// Display Settings
show_signals = input.bool(true, "Show Entry/Exit Signals")
show_trend = input.bool(true, "Show Trend Direction")
show_emas = input.bool(false, "Show EMAs")

// Colors
bull_color = input.color(color.orange, "Bullish Color")
bear_color = input.color(color.purple, "Bearish Color")
neutral_color = input.color(color.gray, "Neutral Color")

// ============================================================================
// CALCULATIONS
// ============================================================================

// Multi-timeframe data
[ema_fast_tf, ema_slow_tf, ema_trend_tf] = request.security(syminfo.tickerid, tf, [ta.ema(close, ema_fast), ta.ema(close, ema_slow), ta.ema(close, ema_trend)])

// Current timeframe calculations
ema_fast_curr = ta.ema(close, ema_fast)
ema_slow_curr = ta.ema(close, ema_slow)
ema_trend_curr = ta.ema(close, ema_trend)

[macd_line_curr, macd_signal_curr, macd_hist_curr] = ta.macd(close, macd_fast, macd_slow, macd_signal)
rsi_curr = ta.rsi(close, rsi_length)

// ATR calculations for exit signals
atr_curr = ta.atr(14)
atr_high = ta.highest(atr_curr, 20)

// Volume analysis
volume_ma = ta.sma(volume, volume_ma_length)
volume_high = volume > volume_ma * 1.5

// ============================================================================
// TREND ANALYSIS
// ============================================================================

// Primary trend (using higher timeframe)
trend_bullish = ema_fast_tf > ema_slow_tf and ema_slow_tf > ema_trend_tf
trend_bearish = ema_fast_tf < ema_slow_tf and ema_slow_tf < ema_trend_tf

// Secondary trend (current timeframe)
trend_bullish_curr = ema_fast_curr > ema_slow_curr and ema_slow_curr > ema_trend_curr
trend_bearish_curr = ema_fast_curr < ema_slow_curr and ema_slow_curr < ema_trend_curr



// ============================================================================
// SIGNAL GENERATION
// ============================================================================

// Swing entry conditions
long_condition = trend_bullish and trend_bullish_curr and macd_line_curr > macd_signal_curr and macd_hist_curr > macd_hist_curr[1] and rsi_curr > 40 and rsi_curr < 80 and volume_high and close > ema_fast_curr

short_condition = trend_bearish and trend_bearish_curr and macd_line_curr < macd_signal_curr and macd_hist_curr < macd_hist_curr[1] and rsi_curr < 60 and rsi_curr > 20 and volume_high and close < ema_fast_curr



// Trend transition conditions (synchronized with trend cloud)
trend_bullish_transition = trend_bullish_curr and not trend_bullish_curr[1]
trend_bearish_transition = trend_bearish_curr and not trend_bearish_curr[1]

// ATR-based exit conditions
atr_bullish_exit = atr_curr > atr_high * 0.8 and close > close[1] and close > close[2]  // High volatility with upward momentum
atr_bearish_exit = atr_curr > atr_high * 0.8 and close < close[1] and close < close[2]  // High volatility with downward momentum



// Trade tracking variables
var float long_entry_price = na
var float short_entry_price = na
var bool in_long_trade = false
var bool in_short_trade = false
var int total_trades = 0
var int sl_exits = 0
var int pt_exits = 0
var int ts_exits = 0

// Current timeframe trade tracking variables
var float ctf_long_entry_price = na
var float ctf_short_entry_price = na
var bool in_ctf_long_trade = false
var bool in_ctf_short_trade = false
var int ctf_total_trades = 0
var int ctf_sl_exits = 0
var int ctf_pt_exits = 0
var int ctf_ts_exits = 0

// ATR diamond tracking variables
var bool atr_bearish_diamond_plotted = false
var bool atr_bullish_diamond_plotted = false

// Risk/Reward line variables (single set for most recent signal)
var line stop_line = na
var line target_line = na
var line trailing_stop_line = na

// Track most recent signal type
var string last_signal_type = na

// Trailing stop variables
var float trailing_stop_level = na
var bool trailing_stop_active = false



// Track trade entries and exits
if long_condition and not in_long_trade
    long_entry_price := close
    in_long_trade := true
    total_trades := total_trades + 1
    atr_bearish_diamond_plotted := false  // Reset diamond flag for new trade
    
    // Create risk/reward lines for daily long signal (1.75:1 ratio)
    line.delete(stop_line)
    line.delete(target_line)
    line.delete(trailing_stop_line)
    stop_line := line.new(bar_index, close - (atr_curr * 2), bar_index + 15, close - (atr_curr * 2), color=color.red, width=2, style=line.style_dotted)
    target_line := line.new(bar_index, close + (atr_curr * 3.5), bar_index + 15, close + (atr_curr * 3.5), color=color.green, width=2, style=line.style_dotted)
    last_signal_type := "daily_long"
    trailing_stop_active := false
    trailing_stop_level := na

if short_condition and not in_short_trade
    short_entry_price := close
    in_short_trade := true
    total_trades := total_trades + 1
    atr_bullish_diamond_plotted := false  // Reset diamond flag for new trade
    
    // Create risk/reward lines for daily short signal (1.75:1 ratio)
    line.delete(stop_line)
    line.delete(target_line)
    line.delete(trailing_stop_line)
    stop_line := line.new(bar_index, close + (atr_curr * 2), bar_index + 15, close + (atr_curr * 2), color=color.red, width=2, style=line.style_dotted)
    target_line := line.new(bar_index, close - (atr_curr * 3.5), bar_index + 15, close - (atr_curr * 3.5), color=color.green, width=2, style=line.style_dotted)
    last_signal_type := "daily_short"
    trailing_stop_active := false
    trailing_stop_level := na

// Current timeframe trade tracking
// Entry conditions for current timeframe (simplified - just trend and MACD)
ctf_long_condition = trend_bullish_curr and macd_line_curr > macd_signal_curr and macd_hist_curr > macd_hist_curr[1]
ctf_short_condition = trend_bearish_curr and macd_line_curr < macd_signal_curr and macd_hist_curr < macd_hist_curr[1]

// Track current timeframe trade entries and exits
if ctf_long_condition and not in_ctf_long_trade
    ctf_long_entry_price := close
    in_ctf_long_trade := true
    ctf_total_trades := ctf_total_trades + 1
    
    // Create risk/reward lines for current timeframe long signal (1.75:1 ratio)
    line.delete(stop_line)
    line.delete(target_line)
    line.delete(trailing_stop_line)
    stop_line := line.new(bar_index, close - (atr_curr * 2), bar_index + 15, close - (atr_curr * 2), color=color.red, width=2, style=line.style_dotted)
    target_line := line.new(bar_index, close + (atr_curr * 3.5), bar_index + 15, close + (atr_curr * 3.5), color=color.green, width=2, style=line.style_dotted)
    last_signal_type := "ctf_long"
    trailing_stop_active := false
    trailing_stop_level := na

if ctf_short_condition and not in_ctf_short_trade
    ctf_short_entry_price := close
    in_ctf_short_trade := true
    ctf_total_trades := ctf_total_trades + 1
    
    // Create risk/reward lines for current timeframe short signal (1.75:1 ratio)
    line.delete(stop_line)
    line.delete(target_line)
    line.delete(trailing_stop_line)
    stop_line := line.new(bar_index, close + (atr_curr * 2), bar_index + 15, close + (atr_curr * 2), color=color.red, width=2, style=line.style_dotted)
    target_line := line.new(bar_index, close - (atr_curr * 3.5), bar_index + 15, close - (atr_curr * 3.5), color=color.green, width=2, style=line.style_dotted)
    last_signal_type := "ctf_short"
    trailing_stop_active := false
    trailing_stop_level := na

// Check if stop loss or profit target are hit (for any active trade)
if last_signal_type == "daily_long" or last_signal_type == "ctf_long"
    stop_loss_level = last_signal_type == "daily_long" ? long_entry_price - (atr_curr * 2) : ctf_long_entry_price - (atr_curr * 2)
    profit_target_level = last_signal_type == "daily_long" ? long_entry_price + (atr_curr * 3.5) : ctf_long_entry_price + (atr_curr * 3.5)
    
    // Check if stop loss is hit
    if close <= stop_loss_level
        if last_signal_type == "daily_long"
            sl_exits := sl_exits + 1
            in_long_trade := false
            long_entry_price := na
        else
            ctf_sl_exits := ctf_sl_exits + 1
            in_ctf_long_trade := false
            ctf_long_entry_price := na
        
        line.delete(stop_line)
        line.delete(target_line)
        line.delete(trailing_stop_line)
        trailing_stop_active := false
        trailing_stop_level := na
        last_signal_type := na  // Clear signal type to prevent re-creation
    
    // Check if profit target is hit
    if close >= profit_target_level
        if last_signal_type == "daily_long"
            pt_exits := pt_exits + 1
            in_long_trade := false
            long_entry_price := na
        else
            ctf_pt_exits := ctf_pt_exits + 1
            in_ctf_long_trade := false
            ctf_long_entry_price := na
        
        line.delete(stop_line)
        line.delete(target_line)
        line.delete(trailing_stop_line)
        trailing_stop_active := false
        trailing_stop_level := na
        last_signal_type := na  // Clear signal type to prevent re-creation

if last_signal_type == "daily_short" or last_signal_type == "ctf_short"
    stop_loss_level = last_signal_type == "daily_short" ? short_entry_price + (atr_curr * 2) : ctf_short_entry_price + (atr_curr * 2)
    profit_target_level = last_signal_type == "daily_short" ? short_entry_price - (atr_curr * 3.5) : ctf_short_entry_price - (atr_curr * 3.5)
    
    // Check if stop loss is hit
    if close >= stop_loss_level
        if last_signal_type == "daily_short"
            sl_exits := sl_exits + 1
            in_short_trade := false
            short_entry_price := na
        else
            ctf_sl_exits := ctf_sl_exits + 1
            in_ctf_short_trade := false
            ctf_short_entry_price := na
        
        line.delete(stop_line)
        line.delete(target_line)
        line.delete(trailing_stop_line)
        trailing_stop_active := false
        trailing_stop_level := na
        last_signal_type := na  // Clear signal type to prevent re-creation
    
    // Check if profit target is hit
    if close <= profit_target_level
        if last_signal_type == "daily_short"
            pt_exits := pt_exits + 1
            in_short_trade := false
            short_entry_price := na
        else
            ctf_pt_exits := ctf_pt_exits + 1
            in_ctf_short_trade := false
            ctf_short_entry_price := na
        
        line.delete(stop_line)
        line.delete(target_line)
        line.delete(trailing_stop_line)
        trailing_stop_active := false
        trailing_stop_level := na
        last_signal_type := na  // Clear signal type to prevent re-creation

// Trailing stop logic
// Check if price has reached 50% of profit target
if last_signal_type == "daily_long" or last_signal_type == "ctf_long"
    profit_target_level = last_signal_type == "daily_long" ? long_entry_price + (atr_curr * 3.5) : ctf_long_entry_price + (atr_curr * 3.5)
    fifty_percent_level = last_signal_type == "daily_long" ? long_entry_price + (atr_curr * 1.75) : ctf_long_entry_price + (atr_curr * 1.75)
    
    if close >= fifty_percent_level and not trailing_stop_active
        trailing_stop_active := true
        trailing_stop_level := close - (atr_curr * 1)  // Initial trailing stop at 1x ATR below current price
        line.delete(trailing_stop_line)
        trailing_stop_line := line.new(bar_index, trailing_stop_level, bar_index + 15, trailing_stop_level, color=color.orange, width=2, style=line.style_dotted)
    
    if trailing_stop_active
        // Update trailing stop to trail up with price
        new_trailing_level = close - (atr_curr * 1)
        if new_trailing_level > trailing_stop_level
            trailing_stop_level := new_trailing_level
            line.set_xy2(trailing_stop_line, bar_index + 15, trailing_stop_level)
            line.set_xy1(trailing_stop_line, bar_index, trailing_stop_level)
        
        // Check if trailing stop is hit
        if close <= trailing_stop_level
            if last_signal_type == "daily_long"
                ts_exits := ts_exits + 1
                in_long_trade := false
                long_entry_price := na
            else
                ctf_ts_exits := ctf_ts_exits + 1
                in_ctf_long_trade := false
                ctf_long_entry_price := na
            
            line.delete(stop_line)
            line.delete(target_line)
            line.delete(trailing_stop_line)
            trailing_stop_active := false
            trailing_stop_level := na
            last_signal_type := na  // Clear signal type to prevent re-creation

if last_signal_type == "daily_short" or last_signal_type == "ctf_short"
    profit_target_level = last_signal_type == "daily_short" ? short_entry_price - (atr_curr * 3.5) : ctf_short_entry_price - (atr_curr * 3.5)
    fifty_percent_level = last_signal_type == "daily_short" ? short_entry_price - (atr_curr * 1.75) : ctf_short_entry_price - (atr_curr * 1.75)
    
    if close <= fifty_percent_level and not trailing_stop_active
        trailing_stop_active := true
        trailing_stop_level := close + (atr_curr * 1)  // Initial trailing stop at 1x ATR above current price
        line.delete(trailing_stop_line)
        trailing_stop_line := line.new(bar_index, trailing_stop_level, bar_index + 15, trailing_stop_level, color=color.orange, width=2, style=line.style_dotted)
    
    if trailing_stop_active
        // Update trailing stop to trail down with price
        new_trailing_level = close + (atr_curr * 1)
        if new_trailing_level < trailing_stop_level
            trailing_stop_level := new_trailing_level
            line.set_xy2(trailing_stop_line, bar_index + 15, trailing_stop_level)
            line.set_xy1(trailing_stop_line, bar_index, trailing_stop_level)
        
        // Check if trailing stop is hit
        if close >= trailing_stop_level
            if last_signal_type == "daily_short"
                ts_exits := ts_exits + 1
                in_short_trade := false
                short_entry_price := na
            else
                ctf_ts_exits := ctf_ts_exits + 1
                in_ctf_short_trade := false
                ctf_short_entry_price := na
            
            line.delete(stop_line)
            line.delete(target_line)
            line.delete(trailing_stop_line)
            trailing_stop_active := false
            trailing_stop_level := na
            last_signal_type := na  // Clear signal type to prevent re-creation

// Calculate performance metrics based on SL, PT, and TS
total_exits = sl_exits + pt_exits + ts_exits
successful_exits = pt_exits + ts_exits  // PT and TS are considered successful
success_percentage = total_exits > 0 ? (successful_exits / total_exits) * 100 : 0

ctf_total_exits = ctf_sl_exits + ctf_pt_exits + ctf_ts_exits
ctf_successful_exits = ctf_pt_exits + ctf_ts_exits  // PT and TS are considered successful
ctf_success_percentage = ctf_total_exits > 0 ? (ctf_successful_exits / ctf_total_exits) * 100 : 0

// ============================================================================
// PLOTTING
// ============================================================================

// Plot EMAs
plot(show_emas ? ema_fast_curr : na, "Fast EMA", color=color.blue, linewidth=1)
plot(show_emas ? ema_slow_curr : na, "Slow EMA", color=color.orange, linewidth=1)
plot(show_emas ? ema_trend_curr : na, "Trend EMA", color=color.purple, linewidth=4)



// Plot signals
plotshape(show_signals and long_condition, "Long Signal", shape.triangleup, location.belowbar, bull_color, size=size.normal)
plotshape(show_signals and short_condition, "Short Signal", shape.triangledown, location.abovebar, bear_color, size=size.normal)

// ATR-based exit signals (diamond indicators)
// Only plot diamonds when volatility is high and momentum is strong
plotshape(show_signals and atr_bearish_exit and trend_bullish_curr and not atr_bearish_diamond_plotted, "ATR Bearish Exit (Uptrend)", shape.diamond, location.abovebar, color.red, size=size.tiny)
plotshape(show_signals and atr_bullish_exit and trend_bearish_curr and not atr_bullish_diamond_plotted, "ATR Bullish Exit (Downtrend)", shape.diamond, location.belowbar, color.green, size=size.tiny)

// Set diamond flags when plotted
if show_signals and atr_bearish_exit and trend_bullish_curr and not atr_bearish_diamond_plotted
    atr_bearish_diamond_plotted := true

if show_signals and atr_bullish_exit and trend_bearish_curr and not atr_bullish_diamond_plotted
    atr_bullish_diamond_plotted := true



// Trend change alert triangles (synchronized with trend cloud)
plotshape(trend_bearish_transition, "Trend Change Bearish", shape.triangledown, location.abovebar, color.new(#8A2BE2, 0), size=size.small)
plotshape(trend_bullish_transition, "Trend Change Bullish", shape.triangleup, location.belowbar, color.new(#FF4500, 0), size=size.small)

// Trend cloud around price (using current timeframe trend)
trend_upper = show_trend ? (trend_bullish_curr ? high + (high * 0.002) : trend_bearish_curr ? high + (high * 0.002) : high + (high * 0.001)) : na
trend_lower = show_trend ? (trend_bullish_curr ? low - (low * 0.002) : trend_bearish_curr ? low - (low * 0.002) : low - (low * 0.001)) : na
trend_color = trend_bullish_curr ? bull_color : trend_bearish_curr ? bear_color : neutral_color
fill(plot(trend_upper, "Trend Upper", color.new(trend_color, 50), 2), plot(trend_lower, "Trend Lower", color.new(trend_color, 50), 2), color=color.new(trend_color, 65), title="Trend Cloud")



// ============================================================================
// TABLE DISPLAY
// ============================================================================

if barstate.islast
    var table info_table = table.new(position.top_right, 2, 12, bgcolor=color.new(color.black, 80), border_width=1, frame_color=color.gray)
    
    table.cell(info_table, 0, 0, "Swing Trading Status", text_color=color.white, bgcolor=color.new(color.gray, 40), text_size=size.small)
    table.cell(info_table, 1, 0, "Value", text_color=color.white, bgcolor=color.new(color.gray, 40), text_size=size.small)
    
    table.cell(info_table, 0, 1, "Trend (Daily)", text_color=color.white, text_size=size.small)
    trend_text = trend_bullish ? "BULLISH" : trend_bearish ? "BEARISH" : "NEUTRAL"
    trend_color = trend_bullish ? bull_color : trend_bearish ? bear_color : neutral_color
    table.cell(info_table, 1, 1, trend_text, text_color=color.white, bgcolor=trend_color, text_size=size.small)
    
    table.cell(info_table, 0, 2, "RSI (CTF)", text_color=color.white, text_size=size.small)
    table.cell(info_table, 1, 2, str.tostring(math.round(rsi_curr, 1)), text_color=color.white, text_size=size.small)
    
    table.cell(info_table, 0, 3, "MACD (CTF)", text_color=color.white, text_size=size.small)
    macd_status = macd_line_curr > macd_signal_curr ? "BULLISH" : "BEARISH"
    macd_color = macd_line_curr > macd_signal_curr ? bull_color : bear_color
    table.cell(info_table, 1, 3, macd_status, text_color=color.white, bgcolor=macd_color, text_size=size.small)
    
    table.cell(info_table, 0, 4, "ATR (CTF)", text_color=color.white, text_size=size.small)
    atr_status = atr_curr > atr_high * 0.8 ? "HIGH" : "NORMAL"
    atr_color = atr_curr > atr_high * 0.8 ? bull_color : neutral_color
    table.cell(info_table, 1, 4, atr_status, text_color=color.white, bgcolor=atr_color, text_size=size.small)
    
    table.cell(info_table, 0, 5, "Volume (CTF)", text_color=color.white, text_size=size.small)
    vol_status = volume_high ? "HIGH" : "NORMAL"
    vol_color = volume_high ? bull_color : neutral_color
    table.cell(info_table, 1, 5, vol_status, text_color=color.white, bgcolor=vol_color, text_size=size.small)
    
    table.cell(info_table, 0, 6, "Signal (Daily)", text_color=color.white, text_size=size.small)
    signal_text = long_condition ? "LONG" : short_condition ? "SHORT" : "NONE"
    signal_color = long_condition ? bull_color : short_condition ? bear_color : neutral_color
    table.cell(info_table, 1, 6, signal_text, text_color=color.white, bgcolor=signal_color, text_size=size.small)
    
    table.cell(info_table, 0, 7, "Daily Success Rate", text_color=color.white, text_size=size.small)
    success_text = str.tostring(math.round(success_percentage, 1)) + "% (" + str.tostring(successful_exits) + "/" + str.tostring(total_exits) + ")"
    success_color = success_percentage >= 60 ? bull_color : success_percentage >= 40 ? neutral_color : bear_color
    table.cell(info_table, 1, 7, success_text, text_color=color.white, bgcolor=success_color, text_size=size.small)
    
    table.cell(info_table, 0, 8, "Daily Exits (SL/PT/TS)", text_color=color.white, text_size=size.small)
    exits_text = str.tostring(sl_exits) + "/" + str.tostring(pt_exits) + "/" + str.tostring(ts_exits)
    table.cell(info_table, 1, 8, exits_text, text_color=color.white, text_size=size.small)
    
    table.cell(info_table, 0, 9, "CTF Success Rate", text_color=color.white, text_size=size.small)
    ctf_success_text = str.tostring(math.round(ctf_success_percentage, 1)) + "% (" + str.tostring(ctf_successful_exits) + "/" + str.tostring(ctf_total_exits) + ")"
    ctf_success_color = ctf_success_percentage >= 60 ? bull_color : ctf_success_percentage >= 40 ? neutral_color : bear_color
    table.cell(info_table, 1, 9, ctf_success_text, text_color=color.white, bgcolor=ctf_success_color, text_size=size.small)
    
    table.cell(info_table, 0, 10, "CTF Exits (SL/PT/TS)", text_color=color.white, text_size=size.small)
    ctf_exits_text = str.tostring(ctf_sl_exits) + "/" + str.tostring(ctf_pt_exits) + "/" + str.tostring(ctf_ts_exits)
    table.cell(info_table, 1, 10, ctf_exits_text, text_color=color.white, text_size=size.small)
    
    table.cell(info_table, 0, 11, "Active Trade", text_color=color.white, text_size=size.small)
    active_trade_text = in_long_trade or in_short_trade or in_ctf_long_trade or in_ctf_short_trade ? "YES" : "NO"
    active_trade_color = in_long_trade or in_short_trade or in_ctf_long_trade or in_ctf_short_trade ? bull_color : neutral_color
    table.cell(info_table, 1, 11, active_trade_text, text_color=color.white, bgcolor=active_trade_color, text_size=size.small)

// ============================================================================
// ALERTS
// ============================================================================

// Entry alerts
if long_condition
    alert("🟢 SWING LONG ENTRY\n" + syminfo.ticker + "\nPrice: " + str.tostring(close, "#.#####") + "\nRSI: " + str.tostring(math.round(rsi_curr, 1)) + "\nMACD: " + str.tostring(math.round(macd_line_curr, 4)), alert.freq_once_per_bar)

if short_condition
    alert("🔴 SWING SHORT ENTRY\n" + syminfo.ticker + "\nPrice: " + str.tostring(close, "#.#####") + "\nRSI: " + str.tostring(math.round(rsi_curr, 1)) + "\nMACD: " + str.tostring(math.round(macd_line_curr, 4)), alert.freq_once_per_bar)



// Trend change alerts (synchronized with trend cloud)
if trend_bullish_transition
    alert("🟢 TREND CHANGE: BULLISH\n" + syminfo.ticker + "\nPrice: " + str.tostring(close, "#.#####") + "\nRSI: " + str.tostring(math.round(rsi_curr, 1)) + "\nMACD: " + str.tostring(math.round(macd_line_curr, 4)) + "\nMACD Signal: " + str.tostring(math.round(macd_signal_curr, 4)) + "\nMACD Hist: " + str.tostring(math.round(macd_hist_curr, 4)) + "\nTrend: " + (trend_bullish_curr ? "BULLISH" : "NEUTRAL"), alert.freq_once_per_bar)

if trend_bearish_transition
    alert("🔴 TREND CHANGE: BEARISH\n" + syminfo.ticker + "\nPrice: " + str.tostring(close, "#.#####") + "\nRSI: " + str.tostring(math.round(rsi_curr, 1)) + "\nMACD: " + str.tostring(math.round(macd_line_curr, 4)) + "\nMACD Signal: " + str.tostring(math.round(macd_signal_curr, 4)) + "\nMACD Hist: " + str.tostring(math.round(macd_hist_curr, 4)) + "\nTrend: " + (trend_bearish_curr ? "BEARISH" : "NEUTRAL"), alert.freq_once_per_bar)
